-- List the number of films per category.
SELECT category_id, COUNT(title)
FROM sakila.film_category as a
JOIN sakila.film as l
ON a.film_id = l.film_id
GROUP BY category_id;

-- Retrieve the store ID, city, and country for each store.
SELECT store_id, COUNT(store_id), c.city, co.country
FROM sakila.store as s
JOIN sakila.address as a
ON s.address_id = a.address_id
JOIN sakila.city as c
ON a.city_id = c.city_id
JOIN sakila.country as co
ON c.country_id = co.country_id
GROUP BY store_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, sum(p.amount) as total_revenue FROM store as s
JOIN sakila.staff as st
ON s.store_id = st.store_id
JOIN payment as p
ON st.staff_id = p.staff_id
GROUP BY s.store_id;

-- Determine the average running time of films for each category.
SELECT AVG(f.length), fc.category_id
FROM film as f
JOIN film_category as fc
ON f.film_id = fc.film_id
GROUP BY fc.category_id;

-- Identify the film categories with the longest average running time.
SELECT AVG(f.length), fc.category_id
FROM film as f
JOIN film_category as fc
ON f.film_id = fc.film_id
GROUP BY fc.category_id
ORDER BY AVG(f.length) DESC;

-- Display the top 10 most frequently rented movies in descending order.
SELECT i.film_id, COUNT(r.rental_id) as amount_of_rentals
FROM rental as r
JOIN inventory as i
ON r.inventory_id = i.inventory_id
GROUP BY film_id
ORDER BY COUNT(r.rental_id) DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT t.title, t.rental_duration,  i.store_id
FROM film as t
JOIN inventory as i
ON t.film_id = i.film_id
WHERE t.title = "Academy Dinosaur" AND t.rental_duration != "Not Available"
GROUP BY i.inventory_id;

/* Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.'
Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."*/
SELECT title, rental_duration,
CASE
WHEN rental_duration = 'Not available' then 'NOT available'
WHEN rental_duration != 'Not available' then 'Available'
WHEN rental_duration = null then 'NOT available'
ELSE 'NOT available'
END AS 'Film availability'
FROM film;


